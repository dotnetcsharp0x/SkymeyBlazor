@page "/users"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SkymeyBlazor.Model.Services
@using Skymey_main_lib.Models
@using Skymey_main_lib.Models.JWT
@using Skymey_main_lib.Models.Tables.User
@using Toolbelt.Blazor
@attribute [StreamRendering]
@inject UserService UserRepository
@inject ProtectedSessionStorage protectedSessionStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IHttpClientInterceptor Interceptor
@inject HttpClient Http

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<p>This component demonstrates showing data.</p>
@if (exchanges != null) {
    @exchanges.Count
}

    
@if (exchanges == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in exchanges)
            {
                <tr>
                    <td>@forecast.FirstName</td>
                    <td>@forecast.LastName</td>
                    <td>@forecast.Password</td>
                    <td>@forecast.Email</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<SU_001ListViewModel> exchanges;

    protected override async Task OnInitializedAsync()
    {
        this.Interceptor.BeforeSendAsync += Interceptor_BeforeSend;
    }
    async Task Interceptor_BeforeSend(object sender, HttpClientInterceptorEventArgs e)
    {
        var AccessToken = await ProtectedLocalStore.GetAsync<string>("AccessToken");
        var RefreshToken = await ProtectedLocalStore.GetAsync<string>("RefreshToken");
        AuthenticatedResponse aresp = new AuthenticatedResponse();
        aresp.AccessToken = AccessToken.Value;
        aresp.RefreshToken = RefreshToken.Value;
        Console.WriteLine("old token");
        Console.WriteLine(aresp.AccessToken);

        AuthenticatedResponse a = await UserRepository.Refresh(aresp);

        Console.WriteLine("New token");
        Console.WriteLine(a.AccessToken);
        await ProtectedLocalStore.SetAsync("RefreshToken", a.RefreshToken!);
        await ProtectedLocalStore.SetAsync("AccessToken", a.AccessToken!);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            var AccessToken = await ProtectedLocalStore.GetAsync<string>("AccessToken");
            var RefreshToken = await ProtectedLocalStore.GetAsync<string>("RefreshToken");
            var result = await ProtectedLocalStore.GetAsync<string>("AccessToken");

            if (result.Value != null)
            {
                if (AccessToken.Value != null)
                {
                    Console.WriteLine();
                    Console.WriteLine(AccessToken.Value);
                    Console.WriteLine();
                    exchanges = await Http.GetFromJsonAsync<List<SU_001ListViewModel>>("https://46.22.247.253:5007/api/User/GetUsers?token=" + AccessToken.Value);
                }
                Console.WriteLine(exchanges.First().FirstName);
                StateHasChanged();
            }
        }
    }
}
